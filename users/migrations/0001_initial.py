# Generated by Django 4.2.23 on 2025-09-15 10:59

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=users.models.generate_user_id, editable=False, max_length=36, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_add_mejlis', 'Can add a Mejlis'), ('can_edit_mejlis', 'Can edit a Mejlis'), ('can_delete_mejlis', 'Can delete a Mejlis'), ('can_view_mejlis', 'Can view a Mejlis'), ('can_add_bed', 'Can add a Bed'), ('can_edit_bed', 'Can edit a Bed'), ('can_delete_bed', 'Can delete a Bed'), ('can_view_bed', 'Can view a Bed'), ('can_add_tvstand', 'Can add a TV Stand'), ('can_edit_tvstand', 'Can edit a TV Stand'), ('can_delete_tvstand', 'Can delete a TV Stand'), ('can_view_tvstand', 'Can view a TV Stand'), ('can_add_kitchen_cabinet', 'Can add a Kitchen Cabinet'), ('can_edit_kitchen_cabinet', 'Can edit a Kitchen Cabinet'), ('can_delete_kitchen_cabinet', 'Can delete a Kitchen Cabinet'), ('can_view_kitchen_cabinet', 'Can view a Kitchen Cabinet'), ('can_add_sofa', 'Can add a Sofa'), ('can_edit_sofa', 'Can edit a Sofa'), ('can_delete_sofa', 'Can delete a Sofa'), ('can_view_sofa', 'Can view a Sofa'), ('can_create_order', 'Can create an order'), ('can_update_order', 'Can update an order'), ('can_cancel_order', 'Can cancel an order'), ('can_view_order', 'Can view orders'), ('can_create_user', 'Can create a user'), ('can_edit_user', 'Can edit a user'), ('can_delete_user', 'Can delete a user'), ('can_view_user', 'Can view users'), ('can_block_user', 'Can block a user'), ('can_reset_password', "Can reset another user's password"), ('can_create_group', 'Can create a group'), ('can_update_group', 'Can update a group'), ('can_assign_group', 'Can assign a group to a user'), ('can_remove_group', 'Can remove a group from a user'), ('can_assign_permission', 'Can assign a permission to a group'), ('can_remove_permission', 'Can remove a permission from a group')],
            },
        ),
    ]
